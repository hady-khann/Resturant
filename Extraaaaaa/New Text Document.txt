 public UserToken GenerateUserSecurityToken(User user)
        {
            var scuritySec = config.GetSection("Security");
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.UTF8.GetBytes(scuritySec["portal_public_key"]);

            ClaimsIdentity subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.NameIdentifier, user.user_name),
                    new Claim(ClaimTypes.Name, user.user_name),
                    new Claim("firstName",user.firstName),
                    new Claim("lastName",user.lastName),
                    new Claim("aud",user.aud[0]),
                    new Claim("aud",user.aud[1]),
                    new Claim("user_name",user.user_name),
                    new Claim("scope",user.scope[0]),
                    new Claim("scope",user.scope[1]),
                    new Claim("scope",user.scope[2]),
                    new Claim("client_id",user.client_id),
                    new Claim("windowsUsername",user.windowsUsername)
                });


            //
            //var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(scuritySec["portal_public_key"]));
            //var audience = scuritySec["audience"];
            //var issuer = scuritySec["issuer"];

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = subject,
                Expires = DateTime.UtcNow.AddMinutes(double.Parse(userTokenExpirationInMinutes)),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var refreshTokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = subject,
                Expires = DateTime.UtcNow.AddMinutes(double.Parse(userRefreshTokenExpirationInMinutes)),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            var refreshToken = tokenHandler.CreateToken(refreshTokenDescriptor);

            UserToken result = new UserToken
            {
                Token = tokenHandler.WriteToken(token),
                RefreshToken = tokenHandler.WriteToken(refreshToken),
            };

            return result;
        }